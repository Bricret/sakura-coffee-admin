generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cajas {
  id          BigInt        @id @default(autoincrement())
  numero_caja String        @unique
  descripcion String?
  estado      cajas_estado
  flujo_cajas flujo_cajas[]
}

model categorias {
  id          BigInt      @id @default(autoincrement())
  nombre      String
  descripcion String?
  productos   productos[]

  @@index([nombre])
}

model detalle_ordens {
  id          BigInt    @id @default(autoincrement())
  orden_id    BigInt
  producto_id BigInt
  cantidad    Int
  monto_C_    Float     @map("monto_C$")
  monto_U_    Float     @map("monto_U$")
  impreso     Boolean   @default(false)
  ordens      ordens    @relation(fields: [orden_id], references: [id], onDelete: Cascade)
  productos   productos @relation(fields: [producto_id], references: [id], onDelete: Cascade)

  @@index([orden_id])
  @@index([producto_id])
}

model facturas {
  id             BigInt               @id @default(autoincrement())
  numero_factura BigInt               @unique
  fecha_emision  DateTime
  hora_emision   DateTime
  metodo_pago    facturas_metodo_pago
  user_id        BigInt
  propina_C_     Float                @map("propina_C$")
  propina_U_     Float                @map("propina_U$")
  descuento_C_   Float                @map("descuento_C$")
  descuento_U_   Float                @map("descuento_U$")
  total_C_       Float                @map("total_C$")
  total_U_       Float                @map("total_U$")
  orden_id       BigInt
  ordens         ordens               @relation(fields: [orden_id], references: [id], onDelete: Cascade)
  users          users                @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([orden_id])
  @@index([user_id])
}

model flujo_cajas {
  id               BigInt    @id @default(autoincrement())
  fecha_apertura   DateTime
  hora_apertura    DateTime
  fecha_cierre     DateTime?
  hora_cierre      DateTime?
  observaciones    String
  faltante_caja    Float?
  sobrante_caja    Float
  monto_inicial_C_ Float     @map("monto_inicial_C$")
  monto_inicial_U_ Float     @map("monto_inicial_U$")
  monto_final_C_   Float?    @map("monto_final_C$")
  monto_final_U_   Float?    @map("monto_final_U$")
  caja_id          BigInt
  user_id          BigInt
  cajas            cajas     @relation(fields: [caja_id], references: [id], onDelete: Cascade)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([caja_id])
  @@index([user_id])
}

model mesas {
  id     BigInt       @id @default(autoincrement())
  nombre String
  estado mesas_estado @default(libre)
  ordens ordens[]
}

model ordens {
  id             BigInt           @id @default(autoincrement())
  mesa_id        BigInt?
  pedido_id      BigInt?
  estado         ordens_estado
  sub_total_C_   Float            @map("sub_total_C$")
  sub_total_U_   Float            @map("sub_total_U$")
  detalle_ordens detalle_ordens[]
  facturas       facturas[]
  mesas          mesas?           @relation(fields: [mesa_id], references: [id], onDelete: Cascade)
  pedidos        pedidos?         @relation(fields: [pedido_id], references: [id], onDelete: Cascade)

  @@index([mesa_id])
  @@index([pedido_id])
}

model pedidos {
  id                         BigInt                @id @default(autoincrement())
  nombre_cliente             String
  direccion_cliente          String?
  anticipo                   Int?
  fecha_pedido               DateTime
  fecha_entrega              DateTime
  hora_entrega               DateTime?
  telefono_cliente           String?
  telefono_adicional_cliente String?
  estado_pedido              pedidos_estado_pedido @default(pendiente)
  estado_pago                pedidos_estado_pago   @default(pendiente)
  observaciones              String?
  total                      Int
  ordens                     ordens[]

  @@index([nombre_cliente])
}

model permisos {
  id           BigInt         @id @default(autoincrement())
  nombre       String
  descripcion  String?
  rol_permisos rol_permisos[]
}

model productos {
  id             BigInt                   @id @default(autoincrement())
  categoria_id   BigInt
  nombre         String
  descripcion    String?
  precio         Float                    @default(0)
  disponibilidad productos_disponibilidad @default(disponible)
  preparado_en   productos_preparado_en
  detalle_ordens detalle_ordens[]
  categorias     categorias               @relation(fields: [categoria_id], references: [id], onDelete: Cascade)

  @@index([categoria_id])
  @@index([nombre])
}

model rol_permisos {
  id         BigInt   @id @default(autoincrement())
  rol_id     BigInt
  permiso_id BigInt
  permisos   permisos @relation(fields: [permiso_id], references: [id], onDelete: Cascade)
  rols       rols     @relation(fields: [rol_id], references: [id], onDelete: Cascade)

  @@index([permiso_id])
  @@index([rol_id])
}

model rols {
  id           BigInt         @id @default(autoincrement())
  nombre       String
  descripcion  String?
  rol_permisos rol_permisos[]
  users        users[]
}

model users {
  id          BigInt        @id @default(autoincrement())
  rol_id      BigInt?
  name        String
  password    String
  status      Boolean       @default(true)
  facturas    facturas[]
  flujo_cajas flujo_cajas[]
  rols        rols?         @relation(fields: [rol_id], references: [id], onDelete: Cascade)

  @@index([rol_id])
}

enum mesas_estado {
  libre
  ocupada
  reservada
}

enum productos_disponibilidad {
  agotado
  disponible
}

enum productos_preparado_en {
  barra
  cocina
}

enum pedidos_estado_pedido {
  entregado
  pendiente
}

enum pedidos_estado_pago {
  cancelado
  pendiente
}

enum ordens_estado {
  pendiente
  finalizada
}

enum cajas_estado {
  abierto
  cerrado
}

enum facturas_metodo_pago {
  efectivo
  tarjeta
  transferencia
}
